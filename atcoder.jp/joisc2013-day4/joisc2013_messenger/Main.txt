#include <cstring>
#include <cstdio>
#include <cassert>
static int a[35];
static int px,py,cx,cy;
static int gc,rc;
static int f[6][6];
static int dx[4]={-1,1,0,0};
static int dy[4]={0,0,-1,1};
static bool flag = false;
static int fx,fy;
void InitA(int T, int X) {
	for(int i=30;i>=0;i--){
		a[30-i]=(X>>i)&1;
		//printf("%d\n",a[30-i]);
	}
	gc=-1,rc=0;
	memset(f,-1,sizeof(f));
	for(int i=1;i<=4;i++){
		for(int j=1;j<=4;j++){
			f[i][j]=0;
		}
	}
	px=0;
	py=0;
	f[1][2]=1;
	f[1][3]=1;
	f[2][1]=1;
	f[2][4]=1;
	f[3][1]=1;
	f[3][4]=1;
	f[4][2]=1;
	f[4][3]=1;
	f[1][1]=2;
	f[1][4]=2;
	f[4][1]=2;
	f[4][4]=2;
}
static int move(int x){
	//printf("moveA %d %d ",cx,cy);
	if(x==-1){
		px=cx-1;py=cy;
	}else if(x==-2){
		px=cx+1;py=cy;
	}else if(x==-3){
		px=cx;py=cy-1;
	}else if(x==-4){
		px=cx;py=cy+1;
	}
	//printf("to %d %d\n",px,py);
	return x;
}
int GameA(int I, int J) {
	cx = I;cy = J;
	if(px==I&&py==J)rc++;
	else rc=0,gc++;
	if(gc>30){
		if(!flag){
			flag = true;
			fx = I;fy = J;
		}
		for(int i=0;i<4;i++){
			int nI = I+dx[i];
			int nJ = J+dy[i];
			if(nI==fx&&nJ==fy)continue;
			if(f[nI][nJ]==0){
				return move(-(i+1));
			}
		}
	}
	if(f[I][J]!=0){
		for(int i=0;i<4;i++){
			int nI = I+dx[i];
			int nJ = J+dy[i];
			if(f[nI][nJ]==1){
				return move(-(i+1));
			}
		}
	}else{
		//printf("%d\n",gc);
		if(I==2&&J==2){
			if(a[gc]==0){
				if(rc==0)return move(-1);
				else if(rc%2==1)return move(-4);
				else return move(-3);
			}else{
				if(rc==0)return move(-3);
				else if(rc%2==1)return move(-2);
				else return move(-1);
			}
		}else if(I==2&&J==3){
			if(a[gc]==0){
				if(rc==0)return move(-1);
				else if(rc%2==1)return move(-3);
				else return move(-4);
			}else{
				if(rc==0)return move(-4);
				else if(rc%2==1)return move(-2);
				else return move(-1);
			}
		}else if(I==3&&J==2){
			if(a[gc]==0){
				if(rc==0)return move(-2);
				else if(rc%2==1)return move(-4);
				else return move(-3);
			}else{
				if(rc==0)return move(-3);
				else if(rc%2==1)return move(-1);
				else return move(-2);
			}
		}else{ // I==3&&J==3
			if(a[gc]==0){
				if(rc==0)return move(-2);
				else if(rc%2==1)return move(-3);
				else return move(-4);
			}else{
				if(rc==0)return move(-4);
				else if(rc%2==1)return move(-1);
				else return move(-2);
			}
		}
	}
}

static int ans;
static int qx,qy,bx,by;
static int rb;
static int f2[6][6];
static int ex[4]={-1,1,0,0};
static int ey[4]={0,0,-1,1};
void InitB(int T) {
	ans = 0;
	rb=0;
	memset(f2,-1,sizeof(f2));
	for(int i=1;i<=4;i++){
		for(int j=1;j<=4;j++){
			f2[i][j]=0;
		}
	}
	qx=0;
	qy=0;
	f2[1][2]=1;
	f2[1][3]=1;
	f2[2][1]=1;
	f2[2][4]=1;
	f2[3][1]=1;
	f2[3][4]=1;
	f2[4][2]=1;
	f2[4][3]=1;
	f2[1][1]=2;
	f2[1][4]=2;
	f2[4][1]=2;
	f2[4][4]=2;
}
static int moveB(int x){
	//printf("moveB %d %d ",bx,by);
	if(x==-1){
		qx=bx-1;qy=by;
	}else if(x==-2){
		qx=bx+1;qy=by;
	}else if(x==-3){
		qx=bx;qy=by-1;
	}else if(x==-4){
		qx=bx;qy=by+1;
	}
	//printf("to %d %d\n",qx,qy);
	return x;
}
int GameB(int I, int J) {
	bx=I;by=J;
	if(qx==I&&qy==J){
		rb++;
		for(int i=0;i<4;i++){
			int nI = I+ex[i];
			int nJ = J+ey[i];
			if(f2[nI][nJ]==0){
				return moveB(-(i+1));
			}
		}
	}
	else rb=0;
	if(f2[qx][qy]==0&&f2[I][J]==1){
		if(I==1||I==4){
			//printf("0\n");
			ans = (ans<<1);
		}
		if(J==1||J==4){
			//printf("1\n");
			ans = (ans<<1)+1;
		}
	}
	if(f2[qx][qy]==0&&f2[I][J]==0){
		//printf("\n");
		/*printf("qx:%d qy:%d\n",qx,qy);
		printf("I:%d J:%d\n",I,J);
		printf("ans: %d\n",ans);*/
		return ans;
	}else if(f2[I][J]!=1){
		for(int i=0;i<4;i++){
			int nI = I+ex[i];
			int nJ = J+ey[i];
			if(f2[nI][nJ]==1){
				return moveB(-(i+1));
			}
		}
	}else{
		for(int i=0;i<4;i++){
			int nI = I+ex[i];
			int nJ = J+ey[i];
			if(f2[nI][nJ]==0){
				return moveB(-(i+1));
			}
		}
	}
}